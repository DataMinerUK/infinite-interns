# Hue configuration file
# ===================================
#
# For complete documentation about the contents of this file, run
# 	$ <hue_root>/build/env/bin/hue config_help
#
# All .ini files under the current directory are treated equally.  Their
# contents are merged to form the Hue configuration, which can
# can be viewed on the Hue at
# 	http://<hue_host>:<port>/dump_config


###########################################################################
# General configuration for core Desktop features (authentication, etc)
###########################################################################

[desktop]

  # Set this to a random string, the longer the better.
  # This is used for secure hashing in the session store.
  secret_key=

  # Webserver listens on this address and port
  http_host=0.0.0.0
  http_port=8888

  # Time zone name
  time_zone=America/Los_Angeles

  # Turn off debug
  django_debug_mode=0

  # Turn off backtrace for server error
  http_500_debug_mode=0

  # Set to true to use CherryPy as the webserver, set to false
  # to use Spawning as the webserver. Defaults to Spawning if
  # key is not specified.
  ## use_cherrypy_server = false

  # Webserver runs as this user
  ## server_user=hue
  ## server_group=hue

  # If set to false, runcpserver will not actually start the web server.
  # Used if Apache is being used as a WSGI container.
  ## enable_server=yes

  # Number of threads used by the CherryPy web server
  ## cherrypy_server_threads=10

  # Filename of SSL Certificate
  ## ssl_certificate=

  # Filename of SSL RSA Private Key
  ## ssl_private_key=

  # Default encoding for site data
  ## default_site_encoding=utf-8

  # Configuration options for user authentication into the web application
  # ------------------------------------------------------------------------
  [[auth]]

    # Authentication backend. Common settings are:
    # - django.contrib.auth.backends.ModelBackend (entirely Django backend)
    # - desktop.auth.backend.AllowAllBackend (allows everyone)
    # - desktop.auth.backend.AllowFirstUserDjangoBackend
    #     (Default. Relies on Django and user manager, after the first login)

  # Configuration options for connecting to LDAP and Active Directory
  # -------------------------------------------------------------------
  [[ldap]]

  # The search base for finding users and groups
  ## base_dn="DC=mycompany,DC=com"

  # The NT domain to connect to (only for use with Active Directory)
  ## nt_domain=mycompany.com

  # URL of the LDAP server
  ## ldap_url=ldap://auth.mycompany.com

  # Path to certificate for authentication over TLS
  ## ldap_cert=

  # Distinguished name of the user to bind as -- not necessary if the LDAP server
  # supports anonymous searches
  ## bind_dn="CN=ServiceAccount,DC=mycompany,DC=com"

  # Password of the bind user -- not necessary if the LDAP server supports
  # anonymous searches
  ## bind_password=

  # Pattern for searching for usernames -- Use <username> for the parameter
  # For use when using LdapBackend for Hue authentication
  ## ldap_username_pattern="uid=<username>,ou=People,dc=mycompany,dc=com"

      [[[users]]]

      # Base filter for searching for users
      ## user_filter="objectclass=*"

      # The username attribute in the LDAP schema
      ## user_name_attr=sAMAccountName

      [[[groups]]]

      # Base filter for searching for groups
      ## group_filter="objectclass=*"

      # The group name attribute in the LDAP schema
      ## group_name_attr=cn

      # The attribute of the group object which identifies the members of the group
      ## group_member_attr=members

  # Configuration options for specifying the Desktop Database.  For more info,
  # see http://docs.djangoproject.com/en/1.1/ref/settings/#database-engine
  # ------------------------------------------------------------------------
  [[database]]
    # Database engine is typically one of:
    # postgresql, mysql, sqlite3, or oracle
    #
    # Note that for sqlite3, 'name', below is a filename;
    # for other backends, it is the database name.
    ## engine=sqlite3
    ## host=
    ## port=
    ## user=
    ## password=
    ## name=


  # Configuration options for connecting to an external SMTP server
  # ------------------------------------------------------------------------
  [[smtp]]

    # The SMTP server information for email notification delivery
    host=localhost
    port=25
    user=
    password=

    # Whether to use a TLS (secure) connection when talking to the SMTP server
    tls=no

    # Default email address to use for various automated notification from Hue  
    ## default_from_email=hue@localhost


  # Configuration options for Kerberos integration for secured Hadoop clusters
  # ------------------------------------------------------------------------
  [[kerberos]]

    # Path to Hue's Kerberos keytab file
    ## hue_keytab=
    # Kerberos principal name for Hue
    ## hue_principal=hue/hostname.foo.com
    # Path to kinit
    ## kinit_path=/path/to/kinit


###########################################################################
# Settings to configure your Hadoop cluster.
###########################################################################

[hadoop]

  # Configuration for HDFS NameNode
  # ------------------------------------------------------------------------
  [[hdfs_clusters]]

    [[[default]]]
      # Enter the filesystem uri
      fs_defaultfs=hdfs://localhost:8020

      # Change this if your HDFS cluster is Kerberos-secured
      ## security_enabled=false

      # Use WebHdfs/HttpFs as the communication mechanism.
      # This should be the web service root URL, such as
      # http://namenode:50070/webhdfs/v1
      ## webhdfs_url=

      # Settings about this HDFS cluster. If you install HDFS in a
      # different location, you need to set the following.

      # Defaults to $HADOOP_HDFS_HOME or /usr/lib/hadoop-hdfs
      ## hadoop_hdfs_home=/usr/lib/hadoop-hdfs

      # Defaults to $HADOOP_BIN or /usr/bin/hadoop
      ## hadoop_bin=/usr/bin/hadoop

      # Defaults to $HADOOP_CONF_DIR or /etc/hadoop/conf
      ## hadoop_conf_dir=/etc/hadoop/conf

  # Configuration for YARN (MR2)
  # ------------------------------------------------------------------------
  [[yarn_clusters]]

    [[[default]]]
      # Enter the host on which you are running the ResourceManager
      resourcemanager_host=localhost
      # The port where the ResourceManager IPC listens on
      resourcemanager_port=8032
      # Whether to submit jobs to this cluster
      submit_to=True

      # Change this if your YARN cluster is Kerberos-secured
      ## security_enabled=false

      # Settings about this MR2 cluster. If you install MR2 in a
      # different location, you need to set the following.

      # Defaults to $HADOOP_MR2_HOME or /usr/lib/hadoop-mapreduce
      ## hadoop_mapred_home=/usr/lib/hadoop-mapreduce

      # Defaults to $HADOOP_BIN or /usr/bin/hadoop
      ## hadoop_bin=/usr/bin/hadoop

      # Defaults to $HADOOP_CONF_DIR or /etc/hadoop/conf
      ## hadoop_conf_dir=/etc/hadoop/conf


###########################################################################
# Settings to configure Beeswax
###########################################################################

[beeswax]
  # Configure the port the internal metastore daemon runs on. Used only if
  # hive.metastore.local is true.
  ## beeswax_meta_server_port=8003

  # Configure the port the beeswax thrift server runs on
  ## beeswax_server_port=8002

  # Hive home directory
  ## hive_home_dir=/usr/lib/hive

  # Hive configuration directory, where hive-site.xml is located
  ## hive_conf_dir=/etc/hive/conf

  # Timeout in seconds for thrift calls to beeswax service
  ## beeswax_server_conn_timeout=120

  # Timeout in seconds for thrift calls to the hive metastore
  ## metastore_conn_timeout=10

  # Maximum Java heapsize (in megabytes) used by Beeswax Server.
  # Note that the setting of HADOOP_HEAPSIZE in $HADOOP_CONF_DIR/hadoop-env.sh
  # may override this setting.
  ## beeswax_server_heapsize=1000

  # Share saved queries with all users. If set to false, saved queries are
  # visible only to the owner and administrators.
  ## share_saved_queries=true


###########################################################################
# Settings to configure Job Designer
###########################################################################

[jobsub]
  # The URL where the Oozie service runs on. This is required in order for
  # users to submit jobs.
  oozie_url=http://localhost:11000/oozie

  ## security_enabled=false


###########################################################################
# Settings to configure Job Browser.
###########################################################################

[jobbrowser]
  # Share submitted jobs information with all users. If set to false,
  # submitted jobs are visible only to the owner and administrators.
  ## share_jobs=true


###########################################################################
# Settings to configure the Shell application
###########################################################################

[shell]
  # The shell_buffer_amount specifies the number of bytes of output per shell
  # that the Shell app will keep in memory. If not specified, it defaults to
  # 524288 (512 MiB).
  ## shell_buffer_amount=100

  # If you run Hue against a Hadoop cluster with Kerberos security enabled, the
  # Shell app needs to acquire delegation tokens for the subprocesses to work
  # correctly. These delegation tokens are stored as temporary files in some
  # directory. You can configure this directory here. If not specified, it
  # defaults to /tmp/hue_delegation_tokens.
  ## shell_delegation_token_dir=/tmp/hue_delegation_tokens

  [[ shelltypes ]]

    # Define and configure a new shell type "flume"
    # ------------------------------------------------------------------------
    [[[ flume ]]]
      nice_name = "Flume Shell"
      command = "/usr/bin/flume shell"
      help = "The command-line Flume client interface."

      [[[[ environment ]]]]
	# You can specify environment variables for the Flume shell
	# in this section.

    # Define and configure a new shell type "pig"
    # ------------------------------------------------------------------------
    [[[ pig ]]]
      nice_name = "Pig Shell (Grunt)"
      command = "/usr/bin/pig -l /dev/null"
      help = "The command-line interpreter for Pig"

      [[[[ environment ]]]]
	# You can specify environment variables for the Pig shell
	# in this section. Note that JAVA_HOME must be configured
	# for the Pig shell to run.

	[[[[[ JAVA_HOME ]]]]]
	  value = "/usr/lib/jvm/java-6-sun"

    # Define and configure a new shell type "hbase"
    # ------------------------------------------------------------------------
    [[[ hbase ]]]
      nice_name = "HBase Shell"
      command = "/usr/bin/hbase shell"
      help = "The command-line HBase client interface."

      [[[[ environment ]]]]
	# You can configure environment variables for the HBase shell
	# in this section.


###########################################################################
# Settings for the User Admin application
###########################################################################

[useradmin]
  # The name of the default user group that users will be a member of
  ## default_user_group=default_group
